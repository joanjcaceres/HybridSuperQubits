import numpy as np
import scipy.constants as const
from scipy.integrate import nquad

def calculate_mutual(loop_size:list[float],offset_position:list[float], flux_line_length:float, flux_line_width:float) -> float:
    """
    Calculates the mutual inductance between a rectangular loop and a triangular flux line.

    The calculation assumes units are in micrometers to avoid rounding errors. Currently, the function is 
    only valid for rectangular loops and assumes a triangular shape of the flux line, with the apex of the 
    triangle located at the origin (0,0) of the coordinate system.

    Parameters:
    - loop_size: A list of two floats representing the size of the rectangle in micrometers. The format is [width, height].
    - offset_position: A list of two floats indicating the coordinates (in micrometers) of the rectangle's corner 
      closest to the origin (0,0). The format is [x_offset, y_offset].
    - flux_line_length: The length of one side of the triangular flux line along the y-axis, in micrometers.
    - flux_line_width: The width of the base of the triangular flux line, in micrometers.

    Returns:
    - The calculated mutual inductance in Henrys.

    Note:
    - The function is currently only implemented for rectangular loops and triangular flux lines.
    - Future improvements might include support for arbitrary shapes defined by a set of points.

    The mutual inductance is calculated by integrating over the specified rectangle and flux line dimensions,
    considering the magnetic field generated by the triangular flux line. The center point of the flux line 
    is considered to be at (0,0).
    """
    
    integrand = lambda x,y,l,w : (x-w) / np.sqrt((x-w)**2 + (y - l)**2)**3 - (x-w) / np.sqrt((x-w)**2 + (y + l)**2)**3

    ranges =[
        [offset_position[0], offset_position[0]+ loop_size[0]],
        [offset_position[1], offset_position[1]+ loop_size[1]],
        [0,flux_line_length/2],
        [-flux_line_width/2,flux_line_width/2]
    ]

    result = nquad(integrand, ranges)

    return const.mu_0/4/np.pi/2 * result[0]/flux_line_width * 1e-6